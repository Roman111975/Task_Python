#3. Реализовать программу работы с органическими клетками. Необходимо
# создать класс Клетка. В его конструкторе инициализировать параметр,
# соответствующий количеству клеток (целое число). В классе должны быть
# реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и обычное (не целочисленное) деление клеток,
# соответственно. В методе деления должно осуществляться округление значения
# до целого числа.
#Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно
# равняться сумме ячеек исходных двух клеток.
#Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если
# разность количества ячеек двух клеток больше нуля, иначе выводить
# соответствующее сообщение.
#Умножение. Создается общая клетка из двух. Число ячеек общей клетки
# определяется как произведение количества ячеек этих двух клеток.
#Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется
# как целочисленное деление количества ячеек этих двух клеток.
#В классе необходимо реализовать метод make_order(), принимающий экземпляр
# класса и количество ячеек в ряду. Данный метод позволяет организовать
# ячейки по рядам.
#Метод должен возвращать строку вида *****\n*****\n*****..., где количество
# ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда
# не хватает, то в последний ряд записываются все оставшиеся.
#Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
#Тогда метод make_order() вернет строку: *****\n*****\n**.
#Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, nuc):
        self.nuc = nuc

    def __str__(self):
        return str(f'Ячейка имеет {self.nuc} клеток')

    def __add__(self, other):
        return Cell(self.nuc + other.nuc)

    def __sub__(self, other):
        return Cell(self.nuc - other.nuc if (self.nuc - other.nuc) > 0
                    else print('Отрицательно!'))

    def __mul__(self, other):
        return Cell(int(self.nuc * other.nuc))

    def __truediv__(self, other):
        return Cell(round(self.nuc // other.nuc))

    def make_order(self, cells_in_row):
        row = ''
        for i in range(int(self.nuc / cells_in_row)):
            row += f'{"*" * cells_in_row} \n'
        print(f'{"=" * 10}')
        row += f'{"*" * (self.nuc % cells_in_row)}'
        return row


cells1 = Cell(50)
cells2 = Cell(40)

print(cells1)
print(cells1 + cells2)
print(cells1 - cells2)
print(cells1 / cells2)
print(cells1 * cells2)
print(cells2.make_order(8))
print(cells1.make_order(13))
